From 6b867977cffd682d6d1842d8b38e69be6f7c98cd Mon Sep 17 00:00:00 2001
From: Edward Hervey <edward@centricular.com>
Date: Sat, 1 Feb 2020 11:52:04 +0100
Subject: [PATCH 62/68] mpegts: Add a property to ignore broken PCR streams

Some mpeg-ts (HLS, DVB, ...) streams out there have completely broken
PCR streams on which we can't reliably recover correct timestamps.

For those, provide a property that will ignore the program PCR stream
(by faking that it's not present (0x1fff)).

Conflicts:
	gst/mpegtsdemux/mpegtsbase.c

NOTE: Support setting default value from env 'GST_TSDEMUX_IGNORE_PCR'.

(cherry picked from commit fa2916a159fd4dcb65be5d7531e6b83ae3b6df4c)
Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 gst/mpegtsdemux/mpegtsbase.c | 36 ++++++++++++++++++++++++++++++++----
 gst/mpegtsdemux/mpegtsbase.h |  4 ++++
 2 files changed, 36 insertions(+), 4 deletions(-)

diff --git a/gst/mpegtsdemux/mpegtsbase.c b/gst/mpegtsdemux/mpegtsbase.c
index 5180c2e..cee4633 100644
--- a/gst/mpegtsdemux/mpegtsbase.c
+++ b/gst/mpegtsdemux/mpegtsbase.c
@@ -59,10 +59,13 @@ static GstStaticPadTemplate sink_template = GST_STATIC_PAD_TEMPLATE ("sink",
     GST_STATIC_CAPS ("video/mpegts, " "systemstream = (boolean) true ")
     );
 
+static int DEFAULT_IGNORE_PCR = FALSE;
+
 enum
 {
   PROP_0,
   PROP_PARSE_PRIVATE_SECTIONS,
+  PROP_IGNORE_PCR,
   /* FILL ME */
 };
 
@@ -138,6 +141,21 @@ mpegts_base_class_init (MpegTSBaseClass * klass)
           "Parse private sections", FALSE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+  /**
+   * GstMpegtsBase:ignore-pcr:
+   *
+   * Ignore PCR (Program Clock Reference) data from MPEG-TS PSI.
+   * This can help with playback of some broken files.
+   *
+   * Since: 1.18
+   */
+  if (g_getenv ("GST_TSDEMUX_IGNORE_PCR"))
+    DEFAULT_IGNORE_PCR = TRUE;
+
+  g_object_class_install_property (gobject_class, PROP_IGNORE_PCR,
+      g_param_spec_boolean ("ignore-pcr", "Ignore PCR stream for timing",
+          "Ignore PCR stream for timing", DEFAULT_IGNORE_PCR,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 }
 
 static void
@@ -150,6 +168,9 @@ mpegts_base_set_property (GObject * object, guint prop_id,
     case PROP_PARSE_PRIVATE_SECTIONS:
       base->parse_private_sections = g_value_get_boolean (value);
       break;
+    case PROP_IGNORE_PCR:
+      base->ignore_pcr = g_value_get_boolean (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
   }
@@ -165,6 +186,9 @@ mpegts_base_get_property (GObject * object, guint prop_id,
     case PROP_PARSE_PRIVATE_SECTIONS:
       g_value_set_boolean (value, base->parse_private_sections);
       break;
+    case PROP_IGNORE_PCR:
+      g_value_set_boolean (value, base->ignore_pcr);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
   }
@@ -243,6 +267,7 @@ mpegts_base_init (MpegTSBase * base)
 
   base->push_data = TRUE;
   base->push_section = TRUE;
+  base->ignore_pcr = DEFAULT_IGNORE_PCR;
 
   mpegts_base_reset (base);
 }
@@ -724,7 +749,7 @@ mpegts_base_is_same_program (MpegTSBase * base, MpegTSBaseProgram * oldprogram,
     return FALSE;
   }
 
-  if (oldprogram->pcr_pid != new_pmt->pcr_pid) {
+  if (!base->ignore_pcr && oldprogram->pcr_pid != new_pmt->pcr_pid) {
     GST_DEBUG ("Different pcr_pid (new:0x%04x, old:0x%04x)",
         new_pmt->pcr_pid, oldprogram->pcr_pid);
     return FALSE;
@@ -891,7 +916,10 @@ mpegts_base_activate_program (MpegTSBase * base, MpegTSBaseProgram * program,
 
   program->pmt = pmt;
   program->pmt_pid = pmt_pid;
-  program->pcr_pid = pmt->pcr_pid;
+  if (!base->ignore_pcr)
+    program->pcr_pid = pmt->pcr_pid;
+  else
+    program->pcr_pid = 0x1fff;
 
   /* extract top-level registration_id if present */
   program->registration_id =
@@ -922,8 +950,8 @@ mpegts_base_activate_program (MpegTSBase * base, MpegTSBaseProgram * program,
   }
   /* We add the PCR pid last. If that PID is already used by one of the media
    * streams above, no new stream will be created */
-  mpegts_base_program_add_stream (base, program, pmt->pcr_pid, -1, NULL);
-  MPEGTS_BIT_SET (base->is_pes, pmt->pcr_pid);
+  mpegts_base_program_add_stream (base, program, program->pcr_pid, -1, NULL);
+  MPEGTS_BIT_SET (base->is_pes, program->pcr_pid);
 
   program->active = TRUE;
   program->initial_program = initial_program;
diff --git a/gst/mpegtsdemux/mpegtsbase.h b/gst/mpegtsdemux/mpegtsbase.h
index 80a454f..ca0ece5 100644
--- a/gst/mpegtsdemux/mpegtsbase.h
+++ b/gst/mpegtsdemux/mpegtsbase.h
@@ -161,6 +161,10 @@ struct _MpegTSBase {
   /* Whether the parent bin is streams-aware, meaning we can
    * add/remove streams at any point in time */
   gboolean streams_aware;
+
+  /* Do not use the PCR stream for timestamp calculation. Useful for
+   * streams with broken/invalid PCR streams. */
+  gboolean ignore_pcr;
 };
 
 struct _MpegTSBaseClass {
-- 
2.20.1

