From 0a15caaa5a15e1784ee97a6471331dfec19fb055 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Fri, 3 Jul 2020 10:20:40 +0800
Subject: [PATCH 24/67] Support holding display for the first app

Use '-w' or '--warm-up' to enable it.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 compositor/main.c             |  5 +++++
 include/libweston/libweston.h |  2 ++
 libweston/compositor.c        | 10 ++++++++++
 3 files changed, 17 insertions(+)

diff --git a/compositor/main.c b/compositor/main.c
index a4f679a04..128016b33 100644
--- a/compositor/main.c
+++ b/compositor/main.c
@@ -679,6 +679,7 @@ usage(int error_code)
 		"  -f, --flight-rec-scopes=SCOPE\n\t\t\tSpecify log scopes to "
 			"subscribe to.\n\t\t\tCan specify multiple scopes, "
 			"each followed by comma\n"
+		"  -w, --warm-up\t\tHold display for the first app\n"
 		"  -h, --help\t\tThis help message\n\n");
 
 #if defined(BUILD_DRM_COMPOSITOR)
@@ -3336,6 +3337,8 @@ wet_main(int argc, char *argv[], const struct weston_testsuite_data *test_data)
 	bool wait_for_debugger = false;
 	struct wl_protocol_logger *protologger = NULL;
 
+	bool warm_up = false;
+
 	const struct weston_option core_options[] = {
 		{ WESTON_OPTION_STRING, "backend", 'B', &backend },
 		{ WESTON_OPTION_STRING, "shell", 0, &shell },
@@ -3354,6 +3357,7 @@ wet_main(int argc, char *argv[], const struct weston_testsuite_data *test_data)
 		{ WESTON_OPTION_BOOLEAN, "debug", 0, &debug_protocol },
 		{ WESTON_OPTION_STRING, "logger-scopes", 'l', &log_scopes },
 		{ WESTON_OPTION_STRING, "flight-rec-scopes", 'f', &flight_rec_scopes },
+		{ WESTON_OPTION_BOOLEAN, "warm-up", 'w', &warm_up },
 	};
 
 	wl_list_init(&wet.layoutput_list);
@@ -3528,6 +3532,7 @@ wet_main(int argc, char *argv[], const struct weston_testsuite_data *test_data)
 	wet.compositor->idle_time = idle_time;
 	wet.compositor->default_pointer_grab = NULL;
 	wet.compositor->exit = handle_exit;
+	wet.compositor->warm_up = warm_up;
 
 	weston_compositor_log_capabilities(wet.compositor);
 
diff --git a/include/libweston/libweston.h b/include/libweston/libweston.h
index 6bd7a0508..39e58c63f 100644
--- a/include/libweston/libweston.h
+++ b/include/libweston/libweston.h
@@ -1203,6 +1203,8 @@ struct weston_compositor {
 
 	enum weston_output_flow output_flow;
 	struct weston_output *prefer_output;
+
+	bool warm_up;
 };
 
 struct weston_buffer {
diff --git a/libweston/compositor.c b/libweston/compositor.c
index 71234c026..0136b8431 100644
--- a/libweston/compositor.c
+++ b/libweston/compositor.c
@@ -2892,6 +2892,11 @@ weston_compositor_build_view_list(struct weston_compositor *compositor,
 		bool system_layer = weston_compositor_is_system_layer(layer);
 
 		wl_list_for_each(view, &layer->view_list.link, layer_link.link) {
+			if (compositor->warm_up && !system_layer) {
+				weston_log("seeing the first app\n");
+				compositor->warm_up = false;
+			}
+
 			view_list_add(compositor, view,
 				      system_layer ? view->output : output);
 		}
@@ -2948,6 +2953,11 @@ weston_output_repaint(struct weston_output *output, void *repaint_data)
 	/* Rebuild the surface list and update surface transforms up front. */
 	weston_compositor_build_view_list(ec, output);
 
+	if (ec->warm_up) {
+		weston_log("holding display for the first app...\n");
+		return -1;
+	}
+
 	/* Find the highest protection desired for an output */
 	wl_list_for_each(pnode, &output->paint_node_z_order_list,
 			 z_order_link) {
-- 
2.20.1

