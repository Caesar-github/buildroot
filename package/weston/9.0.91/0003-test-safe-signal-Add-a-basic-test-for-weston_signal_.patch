From 06829438a8bd10b2a951cf6db9b37d5ed416a1c6 Mon Sep 17 00:00:00 2001
From: Marius Vlad <marius.vlad@collabora.com>
Date: Mon, 6 Dec 2021 15:27:13 +0200
Subject: [PATCH 03/60] test/safe-signal: Add a basic test for
 weston_signal_emit_mutable

Basic test to verify that weston_signal_emit_mutable() would not
corrupt the signal list.

Signed-off-by: Marius Vlad <marius.vlad@collabora.com>
---
 tests/meson.build        |  1 +
 tests/safe-signal-test.c | 91 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 92 insertions(+)
 create mode 100644 tests/safe-signal-test.c

diff --git a/tests/meson.build b/tests/meson.build
index 330e0421..c642ec00 100644
--- a/tests/meson.build
+++ b/tests/meson.build
@@ -216,6 +216,7 @@ tests = [
 			dep_libm,
 		],
 	},
+	{	'name': 'safe-signal', },
 ]
 
 tests_standalone = [
diff --git a/tests/safe-signal-test.c b/tests/safe-signal-test.c
new file mode 100644
index 00000000..3248f0f7
--- /dev/null
+++ b/tests/safe-signal-test.c
@@ -0,0 +1,91 @@
+/*
+ * Copyright 2021 Collabora, Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+#include "config.h"
+
+#include <unistd.h>
+#include <assert.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+#include "../shared/signal.h"
+#include "weston-test-client-helper.h"
+
+struct test_surface_state {
+	struct wl_signal signal_destroy;
+	struct wl_listener surface_destroy_listener;
+};
+
+static enum test_result_code
+fixture_setup(struct weston_test_harness *harness)
+{
+	return weston_test_harness_execute_standalone(harness);
+}
+
+DECLARE_FIXTURE_SETUP(fixture_setup);
+
+static void
+destroy_test_surface(struct test_surface_state *st)
+{
+	weston_signal_emit_mutable(&st->signal_destroy, st);
+}
+
+static void
+notify_test_destroy(struct wl_listener *listener, void *data)
+{
+	struct test_surface_state *st = data;
+
+	wl_list_remove(&st->surface_destroy_listener.link);
+	free(st);
+}
+
+static struct test_surface_state *
+create_surface(void)
+{
+	struct test_surface_state *st = zalloc(sizeof(*st));
+
+	wl_signal_init(&st->signal_destroy);
+	return st;
+}
+
+static void
+add_destroy_listener(struct test_surface_state *st)
+{
+	st->surface_destroy_listener.notify = notify_test_destroy;
+	wl_signal_add(&st->signal_destroy,
+		      &st->surface_destroy_listener);
+}
+
+TEST(real_usecase_standalone)
+{
+	struct test_surface_state *st, *st_new;
+
+	st = create_surface();
+	add_destroy_listener(st);
+
+	st_new = create_surface();
+	add_destroy_listener(st_new);
+
+	destroy_test_surface(st);
+}
-- 
2.20.1

