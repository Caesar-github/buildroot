From ff79ff1b20903742d253234d6ea634f6c4227e22 Mon Sep 17 00:00:00 2001
From: Stefan Agner <stefan@agner.ch>
Date: Wed, 17 Jun 2020 23:36:44 +0200
Subject: [PATCH 05/56] backend-drm: allow to disable GBM modifiers

Allow to disable GBM modifiers at runtime using the environment variable
WESTON_DISABLE_GBM_MODIFIERS.

This can be useful for debugging or when modifiers cause issues, e.g. in
case modifiers use higher memory bandwidth and hence impose a lower
resolution limit as it is the case with Intel Kaby Lake graphics.

Related to: https://gitlab.freedesktop.org/wayland/weston/-/issues/404
Signed-off-by: Stefan Agner <stefan@agner.ch>
(cherry picked from commit 465ab2cd928eea47d8aae6d2e0acb21a87f62009)
Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 libweston/backend-drm/drm-internal.h |  3 ++-
 libweston/backend-drm/drm.c          |  3 ++-
 libweston/backend-drm/kms.c          | 18 ++++++++++++------
 3 files changed, 16 insertions(+), 8 deletions(-)

diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index 3de71728..5b9b16ed 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -625,7 +625,8 @@ drm_property_get_range_values(struct drm_property_info *info,
 			      const drmModeObjectProperties *props);
 int
 drm_plane_populate_formats(struct drm_plane *plane, const drmModePlane *kplane,
-			   const drmModeObjectProperties *props);
+			   const drmModeObjectProperties *props,
+			   const bool use_modifiers);
 void
 drm_property_info_free(struct drm_property_info *info, int num_props);
 
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index 3b0b0e6a..c1411820 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -806,7 +806,8 @@ drm_plane_create(struct drm_backend *b, const drmModePlane *kplane,
 			plane->zpos_max = DRM_PLANE_ZPOS_INVALID_PLANE;
 		}
 
-		if (drm_plane_populate_formats(plane, kplane, props) < 0) {
+		if (drm_plane_populate_formats(plane, kplane, props,
+					       b->fb_modifiers) < 0) {
 			drmModeFreeObjectProperties(props);
 			goto err;
 		}
diff --git a/libweston/backend-drm/kms.c b/libweston/backend-drm/kms.c
index 054077c0..11d5d073 100644
--- a/libweston/backend-drm/kms.c
+++ b/libweston/backend-drm/kms.c
@@ -422,7 +422,8 @@ modifiers_ptr(struct drm_format_modifier_blob *blob)
  */
 int
 drm_plane_populate_formats(struct drm_plane *plane, const drmModePlane *kplane,
-			   const drmModeObjectProperties *props)
+			   const drmModeObjectProperties *props,
+			   const bool use_modifiers)
 {
 	unsigned i;
 	drmModePropertyBlobRes *blob;
@@ -431,6 +432,9 @@ drm_plane_populate_formats(struct drm_plane *plane, const drmModePlane *kplane,
 	uint32_t *blob_formats;
 	uint32_t blob_id;
 
+	if (!use_modifiers)
+		goto fallback;
+
 	blob_id = drm_property_get_value(&plane->props[WDRM_PLANE_IN_FORMATS],
 				         props,
 				         0);
@@ -1464,11 +1468,13 @@ init_kms_caps(struct drm_backend *b)
 	weston_log("DRM: %s atomic modesetting\n",
 		   b->atomic_modeset ? "supports" : "does not support");
 
-	ret = drmGetCap(b->drm.fd, DRM_CAP_ADDFB2_MODIFIERS, &cap);
-	if (ret == 0)
-		b->fb_modifiers = cap;
-	else
-		b->fb_modifiers = 0;
+	if (!getenv("WESTON_DISABLE_GBM_MODIFIERS")) {
+		ret = drmGetCap(b->drm.fd, DRM_CAP_ADDFB2_MODIFIERS, &cap);
+		if (ret == 0)
+			b->fb_modifiers = cap;
+	}
+	weston_log("DRM: %s GBM modifiers\n",
+		   b->fb_modifiers ? "supports" : "does not support");
 
 	/*
 	 * KMS support for hardware planes cannot properly synchronize
-- 
2.20.1

